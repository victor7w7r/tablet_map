use evdev::uinput::VirtualDevice;
use evdev::{Device, EventType, InputEvent, KeyCode, KeyEvent, RelativeAxisCode};
use std::io::Result;
use std::thread::sleep;
use std::time::Duration;

use crate::utils::{scan_dev, setup_virtual_device};

pub struct Pad {
  dev: Device,
  virt_dev: VirtualDevice,
  scroll_threshold: i32,
  last_scroll: i32,
}

impl Pad {
  const DEV_NAME: &str = "Wacom Intuos5 touch S Pad";

  pub fn new() -> Result<Self> {
    Ok(Pad {
      dev: scan_dev(Self::DEV_NAME).expect("Failed to find pad device"),
      virt_dev: setup_virtual_device(
        "virtual_pad",
        &Some(vec![
          KeyCode::BTN_LEFT,
          KeyCode::BTN_MIDDLE,
          KeyCode::BTN_RIGHT,
        ]),
        &Some(vec![
          RelativeAxisCode::REL_X,
          RelativeAxisCode::REL_Y,
          RelativeAxisCode::REL_WHEEL,
        ]),
      )?,
      scroll_threshold: 3,
      last_scroll: 0,
    })
  }

  fn key_map(&mut self, ev: &InputEvent) -> Result<()> {
    if ev.event_type() == EventType::KEY && ev.value() == 1 {
      if ev.code() == 257 || ev.code() == 260 {
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_LEFT, 1)])?;
        sleep(Duration::from_millis(50));
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_LEFT, 0)])?;
      } else if ev.code() == 258 || ev.code() == 261 {
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_MIDDLE, 1)])?;
        sleep(Duration::from_millis(50));
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_MIDDLE, 0)])?;
      } else if ev.code() == 259 || ev.code() == 262 {
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_RIGHT, 1)])?;
        sleep(Duration::from_millis(50));
        self
          .virt_dev
          .emit(&[*KeyEvent::new(KeyCode::BTN_RIGHT, 0)])?;
      }
    }
    Ok(())
  }

  fn scroll_map(&mut self, ev: &InputEvent) -> Result<()> {
    if ev.event_type() == EventType::ABSOLUTE && ev.code() == 8 {
      let current_value = ev.value();
      let mut delta = current_value - self.last_scroll;

      if delta.abs() > 36 {
        if delta > 0 { delta -= 72 } else { delta += 72 }
      }

      if delta != 0 && delta.abs() >= self.scroll_threshold {
        let scroll_amount = delta / self.scroll_threshold;
        let limited_scroll = if scroll_amount.abs() > 3 {
          if scroll_amount > 0 { 3 } else { -3 }
        } else {
          scroll_amount
        };

        self.virt_dev.emit(&[InputEvent::new(
          EventType::RELATIVE.0,
          RelativeAxisCode::REL_WHEEL.0,
          limited_scroll,
        )])?;

        self.virt_dev.emit(&[InputEvent::new(
          EventType::SYNCHRONIZATION.0,
          SynchronizationCode::SYN_REPORT.0,
          0,
        )])?;
      }

      self.last_scroll = current_value;
    }
    Ok(())
  }

  fn run_single_iteration(&mut self) -> Result<()> {
    let events = self.dev.fetch_events()?.collect::<Vec<InputEvent>>();
    for ev in &events {
      self.key_map(&ev)?;
      self.scroll_map(&ev)?;
    }
    Ok(())
  }

  pub fn exec(&mut self) -> Result<()> {
    println!("Wacom Intuos5 pad manager running...");
    loop {
      self.run_single_iteration()?;
      std::thread::sleep(Duration::from_millis(5));
    }
  }
}
